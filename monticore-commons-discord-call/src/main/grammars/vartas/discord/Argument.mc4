package vartas.discord;

/**
 * This grammar defines all valid arguments for the command calls.
 * We have to separate entry from argument, in order to accommodate
 * for ambiguity.
 * e.g. pi can both be interpreted as a string and an arithmetic expression,
 * So even if it is matched by one argument, it should be handled by both entries.
 */
component grammar Argument extends vartas.ArithmeticExpressions,
                                 vartas.chart.Interval,
                                 vartas.discord.Entity,
                                 vartas.discord.OnlineStatus{
    /**
     * Hookpoint for other grammars
     */
    interface symbol Argument;

    astrule Argument = name:String;

    /*=========================================================*/
    /*=== Misc                                              ===*/
    /*=========================================================*/

    //String -> String
    StringArgument implements Argument <400> =
        StringLiteral
    ;

    //Interval -> Interval, String
    IntervalArgument implements Argument <400> =
        IntervalArgumentEntry
    ;

    IntervalArgumentEntry =
        IntervalName
    ;

    //OnlineStatus -> OnlineStatus, String
    OnlineStatusArgument implements Argument <400> =
        OnlineStatusArgumentEntry
    ;

    OnlineStatusArgumentEntry =
        OnlineStatusName
    ;

    /*=========================================================*/
    /*=== Time                                              ===*/
    /*=========================================================*/

    //Date -> Date, Expression, String
    DateArgument implements Argument <300> =
        DateArgumentEntry
    ;

    DateArgumentEntry =
          day:Expression "-"
        month:Expression "-"
         year:Expression
    ;

    /*=========================================================*/
    /*=== Discord Entities                                  ===*/
    /*=========================================================*/

    //User -> User, String
    UserArgument implements Argument <200> =
        UserArgumentEntry
    ;

    UserArgumentEntry =
        User
    ;

    //TextChannel -> TextChannel, String
    TextChannelArgument implements Argument <200> =
        TextChannelArgumentEntry
    ;

    TextChannelArgumentEntry =
        TextChannel
    ;

    //Role -> Role, String
    RoleArgument implements Argument  <200> =
        RoleArgumentEntry
    ;

    RoleArgumentEntry =
        Role
    ;

    /*=========================================================*/
    /*=== Arithmetic Expression and Raw Text               ====*/
    /*=========================================================*/

    //Expression -> Expression, String
    ExpressionArgument implements Argument <100> =
        ExpressionArgumentEntry
    ;

    ExpressionArgumentEntry =
        Expression
    ;
}
