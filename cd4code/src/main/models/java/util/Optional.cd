package java.util;

import java.lang.Object.Object;
import java.lang.Runnable.Runnable;
import java.util.stream.Stream.Stream;
import java.util.function.Consumer.Consumer;
import java.util.function.Function.Function;
import java.util.function.Predicate.Predicate;
import java.util.function.Supplier.Supplier;

/**
 * @version Java 11
 */
public classdiagram Optional{
    <<container>>
    public interface Optional extends Object <<T>>{
        Optional<T> filter(Predicate<? super T> predicate);
        //<U> Optional<U> flatMap(Function<? super T, ? extends Optional<? extends U>> mapper);
        T get();
        void ifPresent(Consumer<? super T> action);
        void ifPresentOrElse(Consumer<? super T> action, Runnable emptyAction);
        boolean isEmpty();
        boolean isPresent();
        //<U> map(Function<? super T, ? extends U> mapper);
        Optional<T> or(Supplier<? extends Optional<? extends T>> supplier);
        T orElse(T other);
        T orElseGet(Supplier<? extends T> supplier);
        T orElseThrow();
        //<X extends Throwable> orElseThrow(Supplier<? extends X> exceptionSupplier);
        Stream<T> stream();
        //Custom methods
        <<template="decorator.java.util.Optional.Set">>
        void set(T newValue);
    }
}