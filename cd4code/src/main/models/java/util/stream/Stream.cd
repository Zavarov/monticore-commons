package java.util.stream;

import java.util.function.Predicate.Predicate;
import java.util.stream.BaseStream.BaseStream;
import java.util.Optional.Optional;

/**
 * @version Java 11
 */
public classdiagram Stream{
    public interface Stream extends BaseStream <<T, S>> {
        boolean allMatch(Predicate<? super T> predicate);
        boolean anyMatch(Predicate<? super T> predicate);
        //<R> R collect(Supplier<R> supplier, BiConsumer<R, ? super T> accumulator, BiConsumer<R,R> combiner);
        //<R,A> R collect(Collector<? super T, A, R> collector);
        long count();
        Stream<T> distinct();
        Stream<T> dropWhile(Predicate<? super T> predicate);
        Stream<T> filter(Predicate<? super T> predicate);
        Optional<T> findAny();
        Optional<T> findFirst();
        //<R> Stream<R> flatMap(Function<? super T, ? extends Stream<? extends R>> mapper);
        DoubleStream flatMapToDouble(Function<? super T, ? extends DoubleStream> mapper);
        IntStream flatMapToInt(Function<? super T, ? extends DoubleStream> mapper);
        LongStream flatMapToLong(Function<? super T, ? extends LongStream> mapper);
        void forEach(Consumer<? super T> action);
        void forEachOrdered(Consumer<? super T> action);
        Stream<T> limit(long maxSize);
        //<R> Stream<R> map(Function<? super T, ? extends R> mapper);
        DoubleStream mapToDouble(ToDoubleFunction<? super T> mapper);
        IntStream map(ToIntFunction<? super T> mapper);
        LongStream mapToLong(ToLongFunction<? super T> mapper);
        Optional<T> max(Comparator<? super T> comparator);
        Optional<T> min(Comparator<? super T> comparator);
        boolean noneMatch(Predicate<? super T> predicate);
        Stream<T> peek(Consumer<? super T> action);
        Optional<T> reduce(BinaryOperator<T> accumulator);
        T reduce(T identity, BinaryOperator<T> accumulator);
        //<U> U reduce(U identity, BiFunction<U, ? super T, U> accumulator, BinaryOperator<U> combiner);
        Stream<T> skip(long n);
        Stream<T> sorted();
        Stream<T> sorted(Comparator<? super T> comparator);
        Stream<T> takeWhile(Predicate<? super T> predicate);
        Object[] toArray();
        //<A> A[] toArray(IntFunction<A[]> generator);
    }
}