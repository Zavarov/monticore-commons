package vartas;

/**
 * This grammar defines primitive arithmetic functions.
 */
grammar ArithmeticExpressions extends de.monticore.expressions.CommonExpressions,
                                      de.monticore.literals.MCCommonLiterals{
    start Expression;

    //Simple literals only allow non-negative numeric literals
    LiteralExpression implements Expression <340> =
        SignedLiteral
    ;

    /*================================================================================================================*/
    /*==  Arguments  =================================================================================================*/
    /*================================================================================================================*/

    AtExpression implements Expression =
        "@" Expression
    ;

    /*================================================================================================================*/
    /*==  Operators  =================================================================================================*/
    /*================================================================================================================*/

    PowExpression implements Expression <185> =
        left:Expression operator:"^" right:Expression
    ;

    /*================================================================================================================*/
    /*==  Methods  ===================================================================================================*/
    /*================================================================================================================*/

    interface MethodExpression extends Expression;

    astrule MethodExpression =
        name:String
    ;

    RandomNumberExpression implements MethodExpression <250> =
        name:"random" "(" dice:Expression "," eyes:Expression ")"
    ;

    AbsExpression implements MethodExpression <250> =
        name:"abs" argument:Expression
    ;

    ACosExpression implements MethodExpression <250> =
        name:"acos" argument:Expression
    ;

    ASinExpression implements MethodExpression <250> =
        name:"asin" argument:Expression
    ;

    ATanExpression implements MethodExpression <250> =
        name:"atan" argument:Expression
    ;

    CeilExpression implements MethodExpression <250> =
        name:"ceil" argument:Expression
    ;

    CosExpression implements MethodExpression <250> =
        name:"cos" argument:Expression
    ;

    FloorExpression implements MethodExpression <250> =
        name:"floor" argument:Expression
    ;

    LogExpression implements MethodExpression <250> =
        name:"log" argument:Expression
    ;

    LnExpression implements MethodExpression <250> =
        name:"ln" argument:Expression
    ;

    MaxExpression implements MethodExpression <250> =
        name:"max" "(" left:Expression "," right:Expression ")"
    ;

    MinExpression implements MethodExpression <250> =
        name:"min" "(" left:Expression "," right:Expression ")"
    ;

    SinExpression implements MethodExpression <250> =
        name:"sin" argument:Expression
    ;

    SqrtExpression implements MethodExpression <250> =
        name:"sqrt" argument:Expression
    ;

    TanExpression implements MethodExpression <250> =
        name:"tan" argument:Expression
    ;
}
