package com.google.common.cache;

import com.google.common.cache.CacheStats.CacheStats;
import com.google.common.collect.ImmutableMap.ImmutableMap;
import com.google.common.util.concurrent.UncheckedExecutionException.UncheckedExecutionException;
import java.util.Collection.Collection;
import java.util.Set.Set;
import java.util.Map.Map;
import java.util.concurrent.Callable.Callable;
import java.util.concurrent.ConcurrentMap.ConcurrentMap;
import java.util.concurrent.ExecutionException.ExecutionException;
import java.lang.Iterable.Iterable;
import java.lang.Object.Object;
/**
 * @version Guava 29.0
 */
public classdiagram Cache{
    <<container>>
    public interface Cache extends Object <<K,V>>{
        ConcurrentMap<K,V> asMap();
        void cleanUp();
        V get(K key, Callable<? extends V> loader) throws ExecutionException;
        ImmutableMap<K,V> getAllPresent(Iterable<?> keys);
        V getIfPresent(Object key);
        void invalidate(Object key);
        void invalidateAll();
        void invalidateAll(Iterable<?> keys);
        void put(K key, V value);
        void putAll(Map<? extends K, ? extends V> m);
        long size();
        CacheStats stats();
        //Custom Methods
        <<template="decorator.com.google.common.cache.Cache.Get">>
        V get(K key) throws ExecutionException;
        <<template="decorator.com.google.common.cache.Cache.GetUnchecked">>
        V getUnchecked(K key) throws UncheckedExecutionException;
        <<template="decorator.com.google.common.cache.Cache.Keys">>
        Set<K> keys();
        <<template="decorator.com.google.common.cache.Cache.Values">>
        Collection<V> values();
    }
}