/*
 * Copyright (c) 2019 Zavarov
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

package vartas.reddit.submission._ast;

import de.monticore.literals.mccommonliterals._ast.ASTBooleanLiteral;
import de.monticore.literals.mccommonliterals._ast.ASTSignedBasicLongLiteral;
import de.monticore.literals.mccommonliterals._ast.ASTStringLiteral;
import vartas.MonticoreEscapeUtils;
import vartas.reddit.Submission;
import vartas.reddit.submission._symboltable.BooleanEntrySymbol;
import vartas.reddit.submission._symboltable.LongEntrySymbol;
import vartas.reddit.submission._symboltable.StringEntrySymbol;

import java.time.LocalDateTime;
import java.time.ZoneOffset;
import java.util.Optional;
/**
 * This class makes the Submission class generated by MontiCore compatible with
 * the {@link Submission}.
 */
public class ASTSubmission extends ASTSubmissionTOP implements Submission {
    /**
     * @return the name of the submission author.
     */
    public String getAuthor() {
        return resolveString(ASTSubmissionEnum.AUTHOR);
    }

    /**
     * @return The unique submission id.
     */
    public String getId() {
        return resolveString(ASTSubmissionEnum.ID);
    }

    /**
     * @return The name of the submission flair, if it exists.
     */
    public Optional<String> getLinkFlairText() {
        return resolveStringOpt(ASTSubmissionEnum.LINKFLAIRTEXT);
    }

    /**
     * @return the subreddit the submission was made in.
     */
    public String getSubreddit() {
        return resolveString(ASTSubmissionEnum.SUBREDDIT);
    }

    /**
     * @return True if this submission has been marked as NSFW.
     */
    public boolean isNsfw() {
        return resolveBoolean(ASTSubmissionEnum.NSFW);
    }

    /**
     * @return True if this submission has been marked as spoiler.
     */
    public boolean isSpoiler() {
        return resolveBoolean(ASTSubmissionEnum.SPOILER);
    }

    /**
     * @return The upvotes of the submission minus the downvotes.
     */
    public int getScore() {
        return (int)resolveLong(ASTSubmissionEnum.SCORE);
    }

    /**
     * @return The title of this submission.
     */
    public String getTitle() {
        return resolveString(ASTSubmissionEnum.TITLE);
    }

    /**
     * @return The timestamp when this submission was created.
     */
    public LocalDateTime getCreated() {
        long seconds = Long.parseUnsignedLong(resolveString(ASTSubmissionEnum.CREATED));
        return LocalDateTime.ofEpochSecond(seconds, 0, ZoneOffset.UTC);
    }

    /**
     * @return The text within the submission, if it exists.
     */
    public Optional<String> getSelfText() {
        return resolveStringOpt(ASTSubmissionEnum.SELFTEXT);
    }

    /**
     * @return The thumbnail of this submission, if it exists.
     */
    public Optional<String> getThumbnail() {
        return resolveStringOpt(ASTSubmissionEnum.THUMBNAIL);
    }

    /**
     * @return An absolute URL to this submission.
     */
    public String getUrl() {
        return resolveString(ASTSubmissionEnum.URL);
    }

    /**
     * @return An URL to this submission relative to reddit.com.
     */
    @Override
    public String getPermalink(){
        return resolveString(ASTSubmissionEnum.PERMALINK);
    }
    /**
     * @return A hash code based on the id of the submission.
     */
    @Override
    public int hashCode(){
        return getId().hashCode();
    }
    /**
     * Two submissions are equal if they have the same id.
     * @param o An object this submission is compared to.
     * @return True if the object is a submission with the same id.
     */
    @Override
    public boolean equals(Object o){
        if(o instanceof Submission){
            Submission submission = (Submission)o;
            return submission.getId().equals(this.getId());
        }else{
            return false;
        }
    }

    private Optional<String> resolveStringOpt(ASTSubmissionEnum key){
        return getSpannedScope()
                .resolveStringEntryLocally(key.name())
                .map(StringEntrySymbol::getAstNode)
                .map(ASTStringEntry::getValue)
                .map(ASTStringLiteral::getValue)
                .map(MonticoreEscapeUtils::unescapeMonticore);
    }

    private String resolveString(ASTSubmissionEnum key){
        return resolveStringOpt(key).orElseThrow();
    }

    private long resolveLong(ASTSubmissionEnum key){
        return getSpannedScope()
                .resolveLongEntryLocally(key.name())
                .map(LongEntrySymbol::getAstNode)
                .map(ASTLongEntry::getValue)
                .map(ASTSignedBasicLongLiteral::getValue)
                .orElseThrow();
    }

    private boolean resolveBoolean(ASTSubmissionEnum key){
        return getSpannedScope()
                .resolveBooleanEntryLocally(key.name())
                .map(BooleanEntrySymbol::getAstNode)
                .map(ASTBooleanEntry::getValue)
                .map(ASTBooleanLiteral::getValue)
                .orElseThrow();
    }
}
