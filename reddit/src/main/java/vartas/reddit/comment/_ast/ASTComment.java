/*
 * Copyright (c) 2019 Zavarov
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

package vartas.reddit.comment._ast;

import de.monticore.literals.mccommonliterals._ast.ASTBasicLongLiteral;
import de.monticore.literals.mccommonliterals._ast.ASTSignedNatLiteral;
import vartas.reddit.Comment;
import vartas.reddit.comment._symboltable.*;

import java.time.LocalDateTime;
import java.time.ZoneOffset;
import java.util.Optional;

import static vartas.reddit.MonticoreEscapeUtils.unescapeMonticore;

/**
 * This class makes the Comment class generated by MontiCore compatible with
 * the {@link Comment}.
 */
public class ASTComment extends ASTCommentTOP implements Comment {
    /**
     * @return the time in UTC when the comment was made
     */
    @Override
    public LocalDateTime getCreated() {
        String digits = getSpannedScope()
                .resolveCreatedLiteralLocally("created")
                .flatMap(CreatedLiteralSymbol::getAstNode)
                .map(ASTCreatedLiteral::getBasicLongLiteral)
                .map(ASTBasicLongLiteral::getDigits).orElseThrow();
        long value = Long.parseUnsignedLong(digits);

        return LocalDateTime.ofEpochSecond(value, 0, ZoneOffset.UTC);
    }
    /**
     * @return the name of the comment author.
     */
    public String getAuthor() {
        Optional<AuthorLiteralSymbol> symbol = getSpannedScope().resolveAuthorLiteralLocally("author");

        return unescapeMonticore(symbol.get().getAstNode().get().getStringLiteral().getValue());
    }

    /**
     * @return the unique comment id.
     */
    public String getId() {
        Optional<IdLiteralSymbol> symbol = getSpannedScope().resolveIdLiteralLocally("id");

        return unescapeMonticore(symbol.get().getAstNode().get().getStringLiteral().getValue());
    }

    /**
     * @return the subreddit the submission was made in.
     */
    public String getSubreddit() {
        Optional<SubredditLiteralSymbol> symbol = getSpannedScope().resolveSubredditLiteralLocally("subreddit");

        return unescapeMonticore(symbol.get().getAstNode().get().getStringLiteral().getValue());
    }

    /**
     * @return The upvotes of the comment minus the downvotes.
     */
    public int getScore() {
        Optional<ScoreLiteralSymbol> symbol = getSpannedScope().resolveScoreLiteralLocally("score");

        //#TODO getSource is bugged in 5.3.0
        ASTSignedNatLiteral ast = symbol.get().getAstNode().get().getSignedNatLiteral();

        return Integer.parseInt(ast.isNegative() ? "-" + ast.getDigits() : ast.getDigits());
    }

    /**
     * @return the name of the parent submission this comment is a part of.
     */
    public String getSubmissionTitle() {
        Optional<SubmissionTitleLiteralSymbol> symbol = getSpannedScope().resolveSubmissionTitleLiteralLocally("submissionTitle");

        return unescapeMonticore(symbol.get().getAstNode().get().getStringLiteral().getValue());
    }

    /**
     * @return the id of the parent submission this comment is a part of.
     */
    public String getSubmission() {
        Optional<SubmissionLiteralSymbol> symbol = getSpannedScope().resolveSubmissionLiteralLocally("submission");

        return unescapeMonticore(symbol.get().getAstNode().get().getStringLiteral().getValue());
    }
    /**
     * @return a hash code based on the id of the comment.
     */
    @Override
    public int hashCode(){
        return getId().hashCode();
    }
    /**
     * Two comments are equal if they have the same id.
     * @param o An object this comment is compared to.
     * @return True if the object is a comment with the same id.
     */
    @Override
    public boolean equals(Object o){
        if(o instanceof Comment){
            Comment comment = (Comment)o;
            return comment.getId().equals(this.getId());
        }else{
            return false;
        }
    }
}
